name: RDP
on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600
    steps:
      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force

      - name: Create RDP User with Static Password
        run: |
          $password = "admin@123"
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force

          if (-not (Get-LocalUser -Name "TOOLBOXLAP" -ErrorAction SilentlyContinue)) {
              New-LocalUser -Name "TOOLBOXLAP" -Password $securePass -AccountNeverExpires
          }

          Add-LocalGroupMember -Group "Administrators" -Member "TOOLBOXLAP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "TOOLBOXLAP"

          echo "RDP_CREDS=User: TOOLBOXLAP | Password: $password" >> $env:GITHUB_ENV

          if (-not (Get-LocalUser -Name "TOOLBOXLAP")) {
              Write-Error "User creation failed"
              exit 1
          }

      - name: Start ngrok tunnel for RDP
        run: |
          # Download and install ngrok
          $ngrokUrl = "https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-windows-amd64.zip"
          $zipPath = "$env:TEMP\ngrok.zip"
          $ngrokDir = "$env:TEMP\ngrok"

          Invoke-WebRequest -Uri $ngrokUrl -OutFile $zipPath
          Expand-Archive -Path $zipPath -DestinationPath $ngrokDir -Force
          Remove-Item $zipPath -Force
          
          # Start the ngrok tunnel in the background
          # We use a public RDP tunnel which does not require an auth token
          Start-Process -FilePath "$ngrokDir\ngrok.exe" -ArgumentList "tcp 3389" -NoNewWindow
          
          # Wait for the tunnel to start and get the address
          $tunnelAddress = $null
          $retries = 0
          while (-not $tunnelAddress -and $retries -lt 30) {
              try {
                  $response = Invoke-WebRequest -Uri "http://127.0.0.1:4040/api/tunnels" -ErrorAction Stop
                  $tunnels = ConvertFrom-Json $response.Content
                  $tunnelAddress = $tunnels.tunnels[0].public_url
              } catch {
                  Start-Sleep -Seconds 5
              }
              $retries++
          }

          if (-not $tunnelAddress) {
              Write-Error "Failed to start ngrok tunnel or retrieve address."
              exit 1
          }

          echo "NGROK_ADDRESS=$tunnelAddress" >> $env:GITHUB_ENV

      - name: Verify RDP Accessibility
        run: |
          Write-Host "Ngrok RDP Address: $env:NGROK_ADDRESS"
          Write-Host "Please note that the ngrok address and port will be different each time the workflow runs."
          $address = $env:NGROK_ADDRESS.Split(':')
          $testResult = Test-NetConnection -ComputerName $address[1].Substring(2) -Port $address[2]
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "TCP connection to RDP port failed"
              exit 1
          }
          Write-Host "TCP connectivity successful!"

      - name: Maintain Connection
        run: |
          Write-Host "`n=== RDP ACCESS ==="
          Write-Host "Address: $env:NGROK_ADDRESS"
          Write-Host "Username: TOOLBOXLAP"
          Write-Host "Password: admin@123"
          Write-Host "==================`n"
          while ($true) {
              Write-Host "[$(Get-Date)] RDP Active - Use Ctrl+C in workflow to terminate"
              Start-Sleep -Seconds 300
          }
